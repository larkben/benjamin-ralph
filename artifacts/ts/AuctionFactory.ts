/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  Asset,
  ContractInstance,
  getContractEventsCurrentCount,
  TestContractParamsWithoutMaps,
  TestContractResultWithoutMaps,
  SignExecuteContractMethodParams,
  SignExecuteScriptTxResult,
  signExecuteMethod,
  addStdIdToFields,
  encodeContractFields,
  Narrow,
} from "@alephium/web3";
import { default as AuctionFactoryContractJson } from "../auctions/AuctionFactory.ral.json";
import { getContractByCodeHash, registerContract } from "./contracts";
import { DIAOracleValue, OracleData, PairInfo, AllStructs } from "./types";

// Custom types for the contract
export namespace AuctionFactoryTypes {
  export type Fields = {
    admin: Address;
    auctionTemplate: HexString;
    loanFactory: HexString;
    auctionNumber: bigint;
    fee: bigint;
  };

  export type State = ContractState<Fields>;

  export type CreateAuctionEvent = ContractEvent<{
    who: Address;
    collateralToken: HexString;
    collateralAmount: bigint;
    tokenRequested: HexString;
    tokenAmount: bigint;
    contractId: HexString;
  }>;
  export type BidAuctionEvent = ContractEvent<{
    who: Address;
    contractId: HexString;
    token: HexString;
    amount: bigint;
    timeEnd: bigint;
  }>;
  export type RedeemAuctionEvent = ContractEvent<{
    who: Address;
    contractId: HexString;
  }>;

  export interface CallMethodTable {
    getLoanFactoryId: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<HexString>;
    };
    createAuction: {
      params: CallContractParams<{
        collateral: HexString;
        collateralAmount: bigint;
        tokenRequested: HexString;
        tokenAmount: bigint;
        loaner: Address;
      }>;
      result: CallContractResult<null>;
    };
    bid: {
      params: CallContractParams<{
        contract: HexString;
        token: HexString;
        amount: bigint;
      }>;
      result: CallContractResult<null>;
    };
    redeem: {
      params: CallContractParams<{ contract: HexString }>;
      result: CallContractResult<null>;
    };
    editRate: {
      params: CallContractParams<{ newFee: bigint }>;
      result: CallContractResult<null>;
    };
    editLoanFactory: {
      params: CallContractParams<{ factoryId: HexString }>;
      result: CallContractResult<null>;
    };
    updateAuctionFactoryCode: {
      params: CallContractParams<{ newCode: HexString }>;
      result: CallContractResult<null>;
    };
    updateAuctionFactoryFields: {
      params: CallContractParams<{
        newCode: HexString;
        immFields: HexString;
        mutFields: HexString;
      }>;
      result: CallContractResult<null>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };
  export type MulticallReturnType<Callss extends MultiCallParams[]> = {
    [index in keyof Callss]: MultiCallResults<Callss[index]>;
  };

  export interface SignExecuteMethodTable {
    getLoanFactoryId: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    createAuction: {
      params: SignExecuteContractMethodParams<{
        collateral: HexString;
        collateralAmount: bigint;
        tokenRequested: HexString;
        tokenAmount: bigint;
        loaner: Address;
      }>;
      result: SignExecuteScriptTxResult;
    };
    bid: {
      params: SignExecuteContractMethodParams<{
        contract: HexString;
        token: HexString;
        amount: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
    redeem: {
      params: SignExecuteContractMethodParams<{ contract: HexString }>;
      result: SignExecuteScriptTxResult;
    };
    editRate: {
      params: SignExecuteContractMethodParams<{ newFee: bigint }>;
      result: SignExecuteScriptTxResult;
    };
    editLoanFactory: {
      params: SignExecuteContractMethodParams<{ factoryId: HexString }>;
      result: SignExecuteScriptTxResult;
    };
    updateAuctionFactoryCode: {
      params: SignExecuteContractMethodParams<{ newCode: HexString }>;
      result: SignExecuteScriptTxResult;
    };
    updateAuctionFactoryFields: {
      params: SignExecuteContractMethodParams<{
        newCode: HexString;
        immFields: HexString;
        mutFields: HexString;
      }>;
      result: SignExecuteScriptTxResult;
    };
  }
  export type SignExecuteMethodParams<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["params"];
  export type SignExecuteMethodResult<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["result"];
}

class Factory extends ContractFactory<
  AuctionFactoryInstance,
  AuctionFactoryTypes.Fields
> {
  encodeFields(fields: AuctionFactoryTypes.Fields) {
    return encodeContractFields(
      addStdIdToFields(this.contract, fields),
      this.contract.fieldsSig,
      AllStructs
    );
  }

  eventIndex = { CreateAuction: 0, BidAuction: 1, RedeemAuction: 2 };
  consts = { AuctionCodes: { NotAdmin: BigInt("0") } };

  at(address: string): AuctionFactoryInstance {
    return new AuctionFactoryInstance(address);
  }

  tests = {
    getLoanFactoryId: async (
      params: Omit<
        TestContractParamsWithoutMaps<AuctionFactoryTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<HexString>> => {
      return testMethod(
        this,
        "getLoanFactoryId",
        params,
        getContractByCodeHash
      );
    },
    createAuction: async (
      params: TestContractParamsWithoutMaps<
        AuctionFactoryTypes.Fields,
        {
          collateral: HexString;
          collateralAmount: bigint;
          tokenRequested: HexString;
          tokenAmount: bigint;
          loaner: Address;
        }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "createAuction", params, getContractByCodeHash);
    },
    bid: async (
      params: TestContractParamsWithoutMaps<
        AuctionFactoryTypes.Fields,
        { contract: HexString; token: HexString; amount: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "bid", params, getContractByCodeHash);
    },
    redeem: async (
      params: TestContractParamsWithoutMaps<
        AuctionFactoryTypes.Fields,
        { contract: HexString }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "redeem", params, getContractByCodeHash);
    },
    editRate: async (
      params: TestContractParamsWithoutMaps<
        AuctionFactoryTypes.Fields,
        { newFee: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "editRate", params, getContractByCodeHash);
    },
    editLoanFactory: async (
      params: TestContractParamsWithoutMaps<
        AuctionFactoryTypes.Fields,
        { factoryId: HexString }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "editLoanFactory", params, getContractByCodeHash);
    },
    updateAuctionFactoryCode: async (
      params: TestContractParamsWithoutMaps<
        AuctionFactoryTypes.Fields,
        { newCode: HexString }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(
        this,
        "updateAuctionFactoryCode",
        params,
        getContractByCodeHash
      );
    },
    updateAuctionFactoryFields: async (
      params: TestContractParamsWithoutMaps<
        AuctionFactoryTypes.Fields,
        { newCode: HexString; immFields: HexString; mutFields: HexString }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(
        this,
        "updateAuctionFactoryFields",
        params,
        getContractByCodeHash
      );
    },
  };

  stateForTest(
    initFields: AuctionFactoryTypes.Fields,
    asset?: Asset,
    address?: string
  ) {
    return this.stateForTest_(initFields, asset, address, undefined);
  }
}

// Use this object to test and deploy the contract
export const AuctionFactory = new Factory(
  Contract.fromJson(
    AuctionFactoryContractJson,
    "",
    "c6233af7df42d52e3e1babfe7fceaa4a54d08b4351f1f2bba19207709629ab68",
    AllStructs
  )
);
registerContract(AuctionFactory);

// Use this class to interact with the blockchain
export class AuctionFactoryInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<AuctionFactoryTypes.State> {
    return fetchContractState(AuctionFactory, this);
  }

  async getContractEventsCurrentCount(): Promise<number> {
    return getContractEventsCurrentCount(this.address);
  }

  subscribeCreateAuctionEvent(
    options: EventSubscribeOptions<AuctionFactoryTypes.CreateAuctionEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      AuctionFactory.contract,
      this,
      options,
      "CreateAuction",
      fromCount
    );
  }

  subscribeBidAuctionEvent(
    options: EventSubscribeOptions<AuctionFactoryTypes.BidAuctionEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      AuctionFactory.contract,
      this,
      options,
      "BidAuction",
      fromCount
    );
  }

  subscribeRedeemAuctionEvent(
    options: EventSubscribeOptions<AuctionFactoryTypes.RedeemAuctionEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      AuctionFactory.contract,
      this,
      options,
      "RedeemAuction",
      fromCount
    );
  }

  subscribeAllEvents(
    options: EventSubscribeOptions<
      | AuctionFactoryTypes.CreateAuctionEvent
      | AuctionFactoryTypes.BidAuctionEvent
      | AuctionFactoryTypes.RedeemAuctionEvent
    >,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvents(
      AuctionFactory.contract,
      this,
      options,
      fromCount
    );
  }

  view = {
    getLoanFactoryId: async (
      params?: AuctionFactoryTypes.CallMethodParams<"getLoanFactoryId">
    ): Promise<AuctionFactoryTypes.CallMethodResult<"getLoanFactoryId">> => {
      return callMethod(
        AuctionFactory,
        this,
        "getLoanFactoryId",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    createAuction: async (
      params: AuctionFactoryTypes.CallMethodParams<"createAuction">
    ): Promise<AuctionFactoryTypes.CallMethodResult<"createAuction">> => {
      return callMethod(
        AuctionFactory,
        this,
        "createAuction",
        params,
        getContractByCodeHash
      );
    },
    bid: async (
      params: AuctionFactoryTypes.CallMethodParams<"bid">
    ): Promise<AuctionFactoryTypes.CallMethodResult<"bid">> => {
      return callMethod(
        AuctionFactory,
        this,
        "bid",
        params,
        getContractByCodeHash
      );
    },
    redeem: async (
      params: AuctionFactoryTypes.CallMethodParams<"redeem">
    ): Promise<AuctionFactoryTypes.CallMethodResult<"redeem">> => {
      return callMethod(
        AuctionFactory,
        this,
        "redeem",
        params,
        getContractByCodeHash
      );
    },
    editRate: async (
      params: AuctionFactoryTypes.CallMethodParams<"editRate">
    ): Promise<AuctionFactoryTypes.CallMethodResult<"editRate">> => {
      return callMethod(
        AuctionFactory,
        this,
        "editRate",
        params,
        getContractByCodeHash
      );
    },
    editLoanFactory: async (
      params: AuctionFactoryTypes.CallMethodParams<"editLoanFactory">
    ): Promise<AuctionFactoryTypes.CallMethodResult<"editLoanFactory">> => {
      return callMethod(
        AuctionFactory,
        this,
        "editLoanFactory",
        params,
        getContractByCodeHash
      );
    },
    updateAuctionFactoryCode: async (
      params: AuctionFactoryTypes.CallMethodParams<"updateAuctionFactoryCode">
    ): Promise<
      AuctionFactoryTypes.CallMethodResult<"updateAuctionFactoryCode">
    > => {
      return callMethod(
        AuctionFactory,
        this,
        "updateAuctionFactoryCode",
        params,
        getContractByCodeHash
      );
    },
    updateAuctionFactoryFields: async (
      params: AuctionFactoryTypes.CallMethodParams<"updateAuctionFactoryFields">
    ): Promise<
      AuctionFactoryTypes.CallMethodResult<"updateAuctionFactoryFields">
    > => {
      return callMethod(
        AuctionFactory,
        this,
        "updateAuctionFactoryFields",
        params,
        getContractByCodeHash
      );
    },
  };

  transact = {
    getLoanFactoryId: async (
      params: AuctionFactoryTypes.SignExecuteMethodParams<"getLoanFactoryId">
    ): Promise<
      AuctionFactoryTypes.SignExecuteMethodResult<"getLoanFactoryId">
    > => {
      return signExecuteMethod(
        AuctionFactory,
        this,
        "getLoanFactoryId",
        params
      );
    },
    createAuction: async (
      params: AuctionFactoryTypes.SignExecuteMethodParams<"createAuction">
    ): Promise<
      AuctionFactoryTypes.SignExecuteMethodResult<"createAuction">
    > => {
      return signExecuteMethod(AuctionFactory, this, "createAuction", params);
    },
    bid: async (
      params: AuctionFactoryTypes.SignExecuteMethodParams<"bid">
    ): Promise<AuctionFactoryTypes.SignExecuteMethodResult<"bid">> => {
      return signExecuteMethod(AuctionFactory, this, "bid", params);
    },
    redeem: async (
      params: AuctionFactoryTypes.SignExecuteMethodParams<"redeem">
    ): Promise<AuctionFactoryTypes.SignExecuteMethodResult<"redeem">> => {
      return signExecuteMethod(AuctionFactory, this, "redeem", params);
    },
    editRate: async (
      params: AuctionFactoryTypes.SignExecuteMethodParams<"editRate">
    ): Promise<AuctionFactoryTypes.SignExecuteMethodResult<"editRate">> => {
      return signExecuteMethod(AuctionFactory, this, "editRate", params);
    },
    editLoanFactory: async (
      params: AuctionFactoryTypes.SignExecuteMethodParams<"editLoanFactory">
    ): Promise<
      AuctionFactoryTypes.SignExecuteMethodResult<"editLoanFactory">
    > => {
      return signExecuteMethod(AuctionFactory, this, "editLoanFactory", params);
    },
    updateAuctionFactoryCode: async (
      params: AuctionFactoryTypes.SignExecuteMethodParams<"updateAuctionFactoryCode">
    ): Promise<
      AuctionFactoryTypes.SignExecuteMethodResult<"updateAuctionFactoryCode">
    > => {
      return signExecuteMethod(
        AuctionFactory,
        this,
        "updateAuctionFactoryCode",
        params
      );
    },
    updateAuctionFactoryFields: async (
      params: AuctionFactoryTypes.SignExecuteMethodParams<"updateAuctionFactoryFields">
    ): Promise<
      AuctionFactoryTypes.SignExecuteMethodResult<"updateAuctionFactoryFields">
    > => {
      return signExecuteMethod(
        AuctionFactory,
        this,
        "updateAuctionFactoryFields",
        params
      );
    },
  };

  async multicall<Calls extends AuctionFactoryTypes.MultiCallParams>(
    calls: Calls
  ): Promise<AuctionFactoryTypes.MultiCallResults<Calls>>;
  async multicall<Callss extends AuctionFactoryTypes.MultiCallParams[]>(
    callss: Narrow<Callss>
  ): Promise<AuctionFactoryTypes.MulticallReturnType<Callss>>;
  async multicall<
    Callss extends
      | AuctionFactoryTypes.MultiCallParams
      | AuctionFactoryTypes.MultiCallParams[]
  >(callss: Callss): Promise<unknown> {
    return await multicallMethods(
      AuctionFactory,
      this,
      callss,
      getContractByCodeHash
    );
  }
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  Asset,
  ContractInstance,
  getContractEventsCurrentCount,
  TestContractParamsWithoutMaps,
  TestContractResultWithoutMaps,
  SignExecuteContractMethodParams,
  SignExecuteScriptTxResult,
  signExecuteMethod,
  addStdIdToFields,
  encodeContractFields,
  Narrow,
} from "@alephium/web3";
import { default as AlpacaFiOracleContractJson } from "../oracle/AlpacaFiOracle.ral.json";
import { getContractByCodeHash, registerContract } from "./contracts";
import { DIAOracleValue, OracleData, PairInfo, AllStructs } from "./types";
import { RalphMap } from "@alephium/web3";

// Custom types for the contract
export namespace AlpacaFiOracleTypes {
  export type Fields = {
    admin: Address;
    updateBot: Address;
  };

  export type State = ContractState<Fields>;

  export interface CallMethodTable {
    getValue: {
      params: CallContractParams<{ pair: HexString }>;
      result: CallContractResult<OracleData>;
    };
    insertPair: {
      params: CallContractParams<{
        pair: HexString;
        token: HexString;
        price: bigint;
        decimals: bigint;
      }>;
      result: CallContractResult<null>;
    };
    removePair: {
      params: CallContractParams<{ pair: HexString }>;
      result: CallContractResult<null>;
    };
    updatePair: {
      params: CallContractParams<{ pair: HexString; price: bigint }>;
      result: CallContractResult<null>;
    };
    updateOracleCode: {
      params: CallContractParams<{ newCode: HexString }>;
      result: CallContractResult<null>;
    };
    updateBotAddress: {
      params: CallContractParams<{ newBot: Address }>;
      result: CallContractResult<null>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };
  export type MulticallReturnType<Callss extends MultiCallParams[]> = {
    [index in keyof Callss]: MultiCallResults<Callss[index]>;
  };

  export interface SignExecuteMethodTable {
    getValue: {
      params: SignExecuteContractMethodParams<{ pair: HexString }>;
      result: SignExecuteScriptTxResult;
    };
    insertPair: {
      params: SignExecuteContractMethodParams<{
        pair: HexString;
        token: HexString;
        price: bigint;
        decimals: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
    removePair: {
      params: SignExecuteContractMethodParams<{ pair: HexString }>;
      result: SignExecuteScriptTxResult;
    };
    updatePair: {
      params: SignExecuteContractMethodParams<{
        pair: HexString;
        price: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
    updateOracleCode: {
      params: SignExecuteContractMethodParams<{ newCode: HexString }>;
      result: SignExecuteScriptTxResult;
    };
    updateBotAddress: {
      params: SignExecuteContractMethodParams<{ newBot: Address }>;
      result: SignExecuteScriptTxResult;
    };
  }
  export type SignExecuteMethodParams<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["params"];
  export type SignExecuteMethodResult<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["result"];

  export type Maps = { prices?: Map<HexString, OracleData> };
}

class Factory extends ContractFactory<
  AlpacaFiOracleInstance,
  AlpacaFiOracleTypes.Fields
> {
  encodeFields(fields: AlpacaFiOracleTypes.Fields) {
    return encodeContractFields(
      addStdIdToFields(this.contract, fields),
      this.contract.fieldsSig,
      AllStructs
    );
  }

  at(address: string): AlpacaFiOracleInstance {
    return new AlpacaFiOracleInstance(address);
  }

  tests = {
    getValue: async (
      params: TestContractParams<
        AlpacaFiOracleTypes.Fields,
        { pair: HexString },
        AlpacaFiOracleTypes.Maps
      >
    ): Promise<TestContractResult<OracleData, AlpacaFiOracleTypes.Maps>> => {
      return testMethod(this, "getValue", params, getContractByCodeHash);
    },
    insertPair: async (
      params: TestContractParams<
        AlpacaFiOracleTypes.Fields,
        { pair: HexString; token: HexString; price: bigint; decimals: bigint },
        AlpacaFiOracleTypes.Maps
      >
    ): Promise<TestContractResult<null, AlpacaFiOracleTypes.Maps>> => {
      return testMethod(this, "insertPair", params, getContractByCodeHash);
    },
    removePair: async (
      params: TestContractParams<
        AlpacaFiOracleTypes.Fields,
        { pair: HexString },
        AlpacaFiOracleTypes.Maps
      >
    ): Promise<TestContractResult<null, AlpacaFiOracleTypes.Maps>> => {
      return testMethod(this, "removePair", params, getContractByCodeHash);
    },
    updatePair: async (
      params: TestContractParams<
        AlpacaFiOracleTypes.Fields,
        { pair: HexString; price: bigint },
        AlpacaFiOracleTypes.Maps
      >
    ): Promise<TestContractResult<null, AlpacaFiOracleTypes.Maps>> => {
      return testMethod(this, "updatePair", params, getContractByCodeHash);
    },
    updateOracleCode: async (
      params: TestContractParams<
        AlpacaFiOracleTypes.Fields,
        { newCode: HexString },
        AlpacaFiOracleTypes.Maps
      >
    ): Promise<TestContractResult<null, AlpacaFiOracleTypes.Maps>> => {
      return testMethod(
        this,
        "updateOracleCode",
        params,
        getContractByCodeHash
      );
    },
    updateBotAddress: async (
      params: TestContractParams<
        AlpacaFiOracleTypes.Fields,
        { newBot: Address },
        AlpacaFiOracleTypes.Maps
      >
    ): Promise<TestContractResult<null, AlpacaFiOracleTypes.Maps>> => {
      return testMethod(
        this,
        "updateBotAddress",
        params,
        getContractByCodeHash
      );
    },
  };

  stateForTest(
    initFields: AlpacaFiOracleTypes.Fields,
    asset?: Asset,
    address?: string,
    maps?: AlpacaFiOracleTypes.Maps
  ) {
    return this.stateForTest_(initFields, asset, address, maps);
  }
}

// Use this object to test and deploy the contract
export const AlpacaFiOracle = new Factory(
  Contract.fromJson(
    AlpacaFiOracleContractJson,
    "=10-4+9=1-1=2-1+d9=1+116=1-3+12a=2-2+3f=155-1+9=82+7a7e0214696e73657274206174206d617020706174683a2000=30+1=1-1=58+7a7e021472656d6f7665206174206d617020706174683a2000=210",
    "283959a0b1c28e53ce218461de67a4ca4414583686d3120a0ddebcf6993d838b",
    AllStructs
  )
);
registerContract(AlpacaFiOracle);

// Use this class to interact with the blockchain
export class AlpacaFiOracleInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  maps = {
    prices: new RalphMap<HexString, OracleData>(
      AlpacaFiOracle.contract,
      this.contractId,
      "prices"
    ),
  };

  async fetchState(): Promise<AlpacaFiOracleTypes.State> {
    return fetchContractState(AlpacaFiOracle, this);
  }

  view = {
    getValue: async (
      params: AlpacaFiOracleTypes.CallMethodParams<"getValue">
    ): Promise<AlpacaFiOracleTypes.CallMethodResult<"getValue">> => {
      return callMethod(
        AlpacaFiOracle,
        this,
        "getValue",
        params,
        getContractByCodeHash
      );
    },
    insertPair: async (
      params: AlpacaFiOracleTypes.CallMethodParams<"insertPair">
    ): Promise<AlpacaFiOracleTypes.CallMethodResult<"insertPair">> => {
      return callMethod(
        AlpacaFiOracle,
        this,
        "insertPair",
        params,
        getContractByCodeHash
      );
    },
    removePair: async (
      params: AlpacaFiOracleTypes.CallMethodParams<"removePair">
    ): Promise<AlpacaFiOracleTypes.CallMethodResult<"removePair">> => {
      return callMethod(
        AlpacaFiOracle,
        this,
        "removePair",
        params,
        getContractByCodeHash
      );
    },
    updatePair: async (
      params: AlpacaFiOracleTypes.CallMethodParams<"updatePair">
    ): Promise<AlpacaFiOracleTypes.CallMethodResult<"updatePair">> => {
      return callMethod(
        AlpacaFiOracle,
        this,
        "updatePair",
        params,
        getContractByCodeHash
      );
    },
    updateOracleCode: async (
      params: AlpacaFiOracleTypes.CallMethodParams<"updateOracleCode">
    ): Promise<AlpacaFiOracleTypes.CallMethodResult<"updateOracleCode">> => {
      return callMethod(
        AlpacaFiOracle,
        this,
        "updateOracleCode",
        params,
        getContractByCodeHash
      );
    },
    updateBotAddress: async (
      params: AlpacaFiOracleTypes.CallMethodParams<"updateBotAddress">
    ): Promise<AlpacaFiOracleTypes.CallMethodResult<"updateBotAddress">> => {
      return callMethod(
        AlpacaFiOracle,
        this,
        "updateBotAddress",
        params,
        getContractByCodeHash
      );
    },
  };

  transact = {
    getValue: async (
      params: AlpacaFiOracleTypes.SignExecuteMethodParams<"getValue">
    ): Promise<AlpacaFiOracleTypes.SignExecuteMethodResult<"getValue">> => {
      return signExecuteMethod(AlpacaFiOracle, this, "getValue", params);
    },
    insertPair: async (
      params: AlpacaFiOracleTypes.SignExecuteMethodParams<"insertPair">
    ): Promise<AlpacaFiOracleTypes.SignExecuteMethodResult<"insertPair">> => {
      return signExecuteMethod(AlpacaFiOracle, this, "insertPair", params);
    },
    removePair: async (
      params: AlpacaFiOracleTypes.SignExecuteMethodParams<"removePair">
    ): Promise<AlpacaFiOracleTypes.SignExecuteMethodResult<"removePair">> => {
      return signExecuteMethod(AlpacaFiOracle, this, "removePair", params);
    },
    updatePair: async (
      params: AlpacaFiOracleTypes.SignExecuteMethodParams<"updatePair">
    ): Promise<AlpacaFiOracleTypes.SignExecuteMethodResult<"updatePair">> => {
      return signExecuteMethod(AlpacaFiOracle, this, "updatePair", params);
    },
    updateOracleCode: async (
      params: AlpacaFiOracleTypes.SignExecuteMethodParams<"updateOracleCode">
    ): Promise<
      AlpacaFiOracleTypes.SignExecuteMethodResult<"updateOracleCode">
    > => {
      return signExecuteMethod(
        AlpacaFiOracle,
        this,
        "updateOracleCode",
        params
      );
    },
    updateBotAddress: async (
      params: AlpacaFiOracleTypes.SignExecuteMethodParams<"updateBotAddress">
    ): Promise<
      AlpacaFiOracleTypes.SignExecuteMethodResult<"updateBotAddress">
    > => {
      return signExecuteMethod(
        AlpacaFiOracle,
        this,
        "updateBotAddress",
        params
      );
    },
  };

  async multicall<Calls extends AlpacaFiOracleTypes.MultiCallParams>(
    calls: Calls
  ): Promise<AlpacaFiOracleTypes.MultiCallResults<Calls>>;
  async multicall<Callss extends AlpacaFiOracleTypes.MultiCallParams[]>(
    callss: Narrow<Callss>
  ): Promise<AlpacaFiOracleTypes.MulticallReturnType<Callss>>;
  async multicall<
    Callss extends
      | AlpacaFiOracleTypes.MultiCallParams
      | AlpacaFiOracleTypes.MultiCallParams[]
  >(callss: Callss): Promise<unknown> {
    return await multicallMethods(
      AlpacaFiOracle,
      this,
      callss,
      getContractByCodeHash
    );
  }
}

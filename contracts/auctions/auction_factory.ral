Contract AuctionFactory (
    admin: Address,
    auctionTemplate: ByteVec,
    mut loanFactory: ByteVec,
    mut auctionNumber: U256,
    mut fee: U256
) {
    event CreateAuction(
        who: Address, 
        collateralToken: ByteVec,
        collateralAmount: U256,
        tokenRequested: ByteVec,
        tokenAmount: U256,
        contractId: ByteVec
    )
    event BidAuction(
        who: Address,
        contractId: ByteVec,
        token: ByteVec,
        amount: U256,
        timeEnd: U256
    )
    event RedeemAuction(
        who: Address,
        contractId: ByteVec
    )

    enum AuctionCodes {
		NotAdmin = 0
    }

    pub fn getLoanFactoryId() -> (ByteVec) {
        return loanFactory
    }

    @using(checkExternalCaller = false, preapprovedAssets = true, assetsInContract = true, updateFields = true)
    pub fn createAuction(collateral: ByteVec, collateralAmount: U256, tokenRequested: ByteVec, tokenAmount: U256, loaner: Address) -> () {

        let caller = callerAddress!()

        let (encodeImmutableFields, encodeMutableFields) = Auction.encodeFields!(
            selfAddress!(), 
            tokenRequested,
            tokenAmount,
            collateral,
            collateralAmount,
            fee,                // fee
            loaner,             // loaner
            loaner,             // loaner is also highest bidder if no bid has been placed
            0                   // no time until bid is placed
        )

        let time = blockTimeStamp!()
        let value = encodeToByteVec!(time, caller, auctionNumber)
        
	    let auctionId = copyCreateSubContract!{callerAddress!() -> ALPH: minimalContractDeposit!() * 2, collateral: collateralAmount}(
		    value,
		    auctionTemplate,
		    encodeImmutableFields,
		    encodeMutableFields
	    )

        auctionNumber = auctionNumber + 1

	    emit CreateAuction(
		    caller,
            collateral,
            collateralAmount,
            tokenRequested,
            tokenAmount,
            auctionId
	    )
    }

    // bid up on mapping
    @using(checkExternalCaller = false, preapprovedAssets = true, assetsInContract = enforced)
    pub fn bid(contract: ByteVec, token: ByteVec, amount: U256) -> () {

        let auction = Auction(contract)
        let caller = callerAddress!()

        let (t, a, time) = auction.bid{caller -> token: amount, ALPH: dustAmount!()}(caller, amount)

        emit BidAuction(
            caller,
            contract,
            t,
            a,
            time
        )
    }

    @using(checkExternalCaller = false, preapprovedAssets = false, assetsInContract = enforced)
    pub fn redeem(contract: ByteVec) -> () {

        let auction = Auction(contract)
        let caller = callerAddress!()

        auction.redeem(caller)

        emit RedeemAuction(
            caller,
            contract
        )
    }

    // admin functions
    @using(checkExternalCaller = true, updateFields = true)
    pub fn editRate(newFee: U256) -> () {
        checkCaller!(callerAddress!() == admin, 0)

        fee = newFee
    }

    // admin functions
    @using(checkExternalCaller = true, updateFields = true)
    pub fn editLoanFactory(factoryId: ByteVec) -> () {
        checkCaller!(callerAddress!() == admin, 0)

        loanFactory = factoryId
    }

    @using(updateFields = false, checkExternalCaller = true)
    pub fn updateAuctionFactoryCode(newCode: ByteVec) -> () {
        checkCaller!(callerAddress!() == admin, 0)

        migrate!(newCode)
    }

    @using(updateFields = true, checkExternalCaller = true)
    pub fn updateAuctionFactoryFields(newCode: ByteVec, immFields: ByteVec, mutFields: ByteVec) -> () {
        checkCaller!(callerAddress!() == admin, 0)

        migrateWithFields!(newCode, immFields, mutFields)
    }
}

// admin functions

TxScript EditLoanFactory (
    contract: AuctionFactory,
    factoryId: ByteVec
) {
    contract.editLoanFactory(factoryId)
}

TxScript EditAuctionRate (
    contract: AuctionFactory,
    newFee: U256
) {
    contract.editRate(newFee)
}

TxScript Bid (
    contract: AuctionFactory,
    id: ByteVec,
    token: ByteVec,
    amount: U256
) {
    contract.bid{callerAddress!() -> token: amount, ALPH: dustAmount!()}(id, token, amount)
}

TxScript Redeem (
    contract: AuctionFactory,
    id: ByteVec
) {
    contract.redeem(id)
}

TxScript UpdateAuctionFactoryCode (
    auctionFactory: AuctionFactory,
    newCode: ByteVec
) {
    auctionFactory.updateAuctionFactoryCode(newCode)
}

TxScript UpdateAuctionFactoryFields (
    auctionFactory: AuctionFactory,
    newCode: ByteVec, 
    immFields: ByteVec, 
    mutFields: ByteVec
) {
    auctionFactory.updateAuctionFactoryFields(newCode, immFields, mutFields)
}

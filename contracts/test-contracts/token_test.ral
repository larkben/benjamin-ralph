import "std/fungible_token_interface"

// seems a dynamic token is not possible?

Contract TokenTest (
    name: ByteVec,
    symbol: ByteVec,
    mut supply: U256
) implements IFungibleToken {
    // IFungibleToken implementation for sPoolToken
    pub fn getSymbol() -> (ByteVec) {
        return symbol
    }

    pub fn getName() -> (ByteVec) {
        return name
    }

    pub fn getDecimals() -> (U256) {
        return 18
    }

    pub fn getTotalSupply() -> (U256) {
        return supply
    }

    @using(checkExternalCaller = false, assetsInContract = true, updateFields = true)
    pub fn mintSupply(caller: Address, amount: U256) -> () {
        supply = supply + amount

        transferToken!(selfAddress!(), caller, selfContractId!(), amount)
    }
}

TxScript MintSupply (
    contract: TokenTest,
    amount: U256
) {
    let caller = callerAddress!()

    contract.mintSupply(caller, amount)
}
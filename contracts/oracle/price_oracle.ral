struct OracleData {
    token: ByteVec,
    mut value: U256,
    decimals: U256
}

// notes: all prices should be 8 decimals to avoid conflicts with alephium oracle
Contract AlpacaFiOracle (
    admin: Address,
    mut updateBot: Address
) {
    mapping [ByteVec, OracleData] prices

    pub fn getValue(pair: ByteVec) -> (OracleData) {
        assert!(prices.contains!(pair) == true, 0)

        return prices[pair]
    }

    @using(checkExternalCaller = false, preapprovedAssets = true, updateFields = false)
    pub fn insertPair(pair: ByteVec, token: ByteVec, price: U256, decimals: U256) -> () {
        checkCaller!(callerAddress!() == admin, 0)
        
        let b = OracleData {
            token: token,
            value: price,
            decimals: decimals
        }

        prices.insert!(callerAddress!(), pair, b)
    }

    @using(checkExternalCaller = false, preapprovedAssets = false, updateFields = false, assetsInContract = false)
    pub fn removePair(pair: ByteVec) -> () {
        checkCaller!(callerAddress!() == admin, 0)

        prices.remove!(callerAddress!(), pair)
    }

    @using(checkExternalCaller = true, preapprovedAssets = false, updateFields = false)
    pub fn updatePair(pair: ByteVec, price: U256) -> () {
        // check caller
        checkCaller!(callerAddress!() == updateBot, 1)

        // assert that it exists
        assert!(prices.contains!(pair) == true, 2)

        // update the value
        prices[pair].value = price
    }

    // update code
    @using(updateFields = false, checkExternalCaller = true)
    pub fn updateOracleCode (
        newCode: ByteVec
    ) -> () {
        checkCaller!(callerAddress!() == admin, 0)

        migrate!(newCode)
    }

    // update code
    @using(updateFields = true, checkExternalCaller = true)
    pub fn updateBotAddress (
        newBot: Address
    ) -> () {
        checkCaller!(callerAddress!() == admin, 0)

        updateBot = newBot
    }
}

TxScript InsertPair (
    oracle: AlpacaFiOracle,
    pair: ByteVec,
    token: ByteVec,
    price: U256,
    decimals: U256
) {
    oracle.insertPair{callerAddress!() -> ALPH: mapEntryDeposit!()}(pair, token, price, decimals)
}

TxScript RemovePair (
    oracle: AlpacaFiOracle,
    pair: ByteVec
) {
    oracle.removePair(pair)
}

TxScript UpdatePair (
    oracle: AlpacaFiOracle,
    pair: ByteVec,
    price: U256
) {
    oracle.updatePair(pair, price)
}

TxScript UpdateOracleCode (
    oracle: AlpacaFiOracle,
    newCode: ByteVec
) {
    oracle.updateOracleCode(newCode)
}

TxScript UpdateBotAddress (
    oracle: AlpacaFiOracle,
    newBot: Address
) {
    oracle.updateBotAddress(newBot)
}
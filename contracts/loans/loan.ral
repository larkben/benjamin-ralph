Contract Loan (
    borrower: Address,
    mut lender: Address,
    tokenRequested: ByteVec,
    tokenAmount: U256,
    // collateral
    collateralToken: ByteVec,
    mut collateralAmount: U256,
    interest: U256,
    rate: U256,
    duration: U256,
    mut startTime: U256,
    // active
    mut active: Bool,
    parentContract: Address,
    // liquidation
    canLiquidate: Bool,
    mut ratio: U256,
    // auction contract
    auctionContract: ByteVec
) {
    enum Loan {
        AuctionEnded = 0
        InvalidCaller = 1
        AuctionActive = 2
    }

    pub fn getTokenRequested() -> (ByteVec, U256) {
        return tokenRequested, tokenAmount
    }

    pub fn getTokenCollateral() -> (ByteVec, U256) {
        return collateralToken, collateralAmount
    }

    pub fn canLoanLiquidate() -> (Bool) {
        return canLiquidate
    }

    pub fn getBorrower() -> (Address) {
        return borrower
    }

    // update ratio function needs to be added

    pub fn isLoanComplete() -> (Bool) {
        assert!(active == true, 1)

        // confirm the loan has completed it's time
        assert!(blockTimeStamp!() > startTime + duration, 0)

        return true
    }

    pub fn getInterest() -> (U256) {
        if (interest > 0) {
            // Calculate elapsed time
            let elapsedTime = blockTimeStamp!() - startTime
    
            // Avoid integer truncation: multiply first, then divide
            let gain = (tokenAmount * interest * elapsedTime) / (31556926000 * 10000)
    
            // Calculate 7% flat interest (tokenAmount * 7 / 100)
            let flatInterest = (tokenAmount * 7) / 100
    
            // Return the original amount + accrued interest + flat interest
            return tokenAmount + gain + flatInterest
        } else {
            return tokenAmount
        }
    }

    fn getCommission(total: U256) -> (U256) {
        if (rate > 0) {
            let comission = (total * rate) / 10000
            // return the original amount plus interest
            return comission 
        }
        else {
            return 0
        }
    }

    @using(checkExternalCaller = true, updateFields = true, preapprovedAssets = true)
    pub fn acceptLoan(acceptor: Address, newRatio: U256) -> () {
        checkCaller!(callerAddress!() == parentContract, 0)

        assert!(active == false, 4)

        transferToken!(acceptor, borrower, ALPH, dustAmount!())
        transferToken!(acceptor, borrower, tokenRequested, tokenAmount)

        active = true

        startTime = blockTimeStamp!()

        lender = acceptor

        // parent contract ensures collateral is > 150% before accepting
        ratio = newRatio
    }

    @using(checkExternalCaller = true, assetsInContract = true)
    pub fn cancelLoan(caller: Address) -> () {
        checkCaller!(callerAddress!() == parentContract, 0)

        assert!(active == false, 1)

        destroySelf!(borrower)
    }
    
    @using(checkExternalCaller = false, assetsInContract = true)
    pub fn forceCancel() -> () {
        checkCaller!(callerAddress!() == borrower, 5)

        assert!(active == false, 1)

        destroySelf!(borrower)
    }

    @using(checkExternalCaller = true, preapprovedAssets = true, assetsInContract = true)
    pub fn payLoan(caller: Address) -> () {
        checkCaller!(callerAddress!() == parentContract, 0)

        // payback the loan, the loan must be active
        assert!(active == true, 2)

        // loan has expired
        assert!(startTime + duration > blockTimeStamp!(), 4)

        // transfer back assets plus the interest
        let totalPayment = getInterest()

        let totalCommission = getCommission(totalPayment)

        // user pays back two seperate accounts (marketplace fees, and the person who loaned them the assets)
        transferToken!(borrower, lender, ALPH, dustAmount!())
        transferToken!(borrower, lender, tokenRequested, totalPayment - totalCommission)

        let parent = LoanFactory(addressToContractId!(parentContract))
        let collector = parent.depositFeeCollector(tokenRequested)

        Fee(collector).depositInCollector{selfAddress!() -> tokenRequested: totalCommission, ALPH: dustAmount!()}(
            selfAddress!(), 
            tokenRequested, 
            totalCommission
        )

        // destroy the contract
        destroySelf!(borrower)
    }

    @using(checkExternalCaller = true, preapprovedAssets = false, assetsInContract = true, updateFields = false)
    pub fn forfeit() -> () {
        checkCaller!(callerAddress!() == parentContract, 0)

        assert!(active, 3)
        assert!(startTime + duration < blockTimeStamp!(), 4)

        if (!canLiquidate) {
            let totalCommission = getCommission(collateralAmount)

            let parent = LoanFactory(addressToContractId!(parentContract))
            let collector = parent.depositFeeCollector(collateralToken)

            Fee(collector).depositInCollector{selfAddress!() -> collateralToken: totalCommission, ALPH: dustAmount!()}(
                selfAddress!(), 
                collateralToken, 
                totalCommission
            )

            // claim collateral and remove contract
            destroySelf!(lender)
        } else {
            let auction = AuctionFactory(auctionContract)

            // Gonna wanna take the APS to 0.3 alphs to alleviate these changes @larkben
            auction.createAuction{selfAddress!() -> ALPH: minimalContractDeposit!() * 2, collateralToken: collateralAmount}(
                collateralToken,
                collateralAmount,
                tokenRequested,
                tokenAmount,
                lender
            )

            // should just return 0.1 alphs
            destroySelf!(borrower)  // liquidation notification
        }
    }

    // liquidation functions
    // ---------------------------------------------------------

    // returns the amount of collateral after added
    @using(checkExternalCaller = true, preapprovedAssets = true, assetsInContract = true, updateFields = true)
    pub fn addCollateral(caller: Address, collateralAdded: U256, newRatio: U256) -> (U256) {
        checkCaller!(callerAddress!() == parentContract, 0)

        // confirm the contract is a liquid contract and can be given collateral
        assert!(canLiquidate == true, 6)

        // transfer additional collateral to offset liquidation
        transferToken!(borrower, selfAddress!(), ALPH, dustAmount!())
        transferToken!(borrower, selfAddress!(), collateralToken, collateralAdded)
        collateralAmount = collateralAmount + collateralAdded
        
        // assign new ratio
        ratio = newRatio

        return collateralAmount
    }

    @using(checkExternalCaller = true, preapprovedAssets = true, assetsInContract = true, updateFields = true)
    pub fn removeCollateral(caller: Address, collateralRemoved: U256, newRatio: U256) -> (U256) {
        checkCaller!(callerAddress!() == parentContract, 0)

        // confirm the contract is a liquid contract and can be given collateral
        assert!(canLiquidate == true, 6)

        // cannot remove if the loan is active
        assert!(active == false, 7)

        transferToken!(caller, selfAddress!(), ALPH, dustAmount!())

        transferToken!(selfAddress!(), borrower, ALPH, dustAmount!())
        transferToken!(selfAddress!(), borrower, collateralToken, collateralRemoved)
        collateralAmount = collateralAmount - collateralRemoved
        
        // assign new ratio
        ratio = newRatio

        return collateralAmount
    }

    @using(checkExternalCaller = true, preapprovedAssets = false, assetsInContract = true, updateFields = false)
    pub fn activateLiquidation(collateralLevel: U256) -> () {
        checkCaller!(callerAddress!() == parentContract, 0)

        let auction = AuctionFactory(auctionContract)

        // Gonna wanna take the APS to 0.3 alphs to alleviate these changes @larkben
        auction.createAuction{selfAddress!() -> ALPH: minimalContractDeposit!() * 2, collateralToken: collateralAmount}(
            collateralToken,
            collateralAmount,
            tokenRequested,
            tokenAmount,
            lender
        )

        // should just return 0.1 alphs
        destroySelf!(borrower)  // liquidation notification
    }

    // upgrade functions
    @using(updateFields = false, checkExternalCaller = true)
    pub fn updateLoanCode(newCode: ByteVec) -> () {
        checkCaller!(callerAddress!() == parentContract, 9)

        // add addtional security param -> would stop parentContract / factory updates
        assert!(borrower == parentContract, 10)

        migrate!(newCode)
    }

    @using(updateFields = true, checkExternalCaller = true)
    pub fn updateLoanFields(newCode: ByteVec, immFields: ByteVec, mutFields: ByteVec) -> () {
        checkCaller!(callerAddress!() == parentContract, 9)

        // add addtional security param -> would stop parentContract / factory updates
        assert!(borrower == parentContract, 10)

        migrateWithFields!(newCode, immFields, mutFields)
    }
}

TxScript ForceCancel (
    loan: Loan
) {
    loan.forceCancel()
}

TxScript UpdateLoanCode (
    loan: Loan,
    newCode: ByteVec
) {
    loan.updateLoanCode(newCode)
}

TxScript UpdateLoanFields (
    loan: Loan,
    newCode: ByteVec, 
    immFields: ByteVec, 
    mutFields: ByteVec
) {
    loan.updateLoanFields(newCode, immFields, mutFields)
}
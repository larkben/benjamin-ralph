struct PairInfo {
    // need to have decimals for liquidation
    pair: ByteVec,
    mut decimals: U256,
    oracle: Bool
}

struct DIAOracleValue {
    mut value: U256,
    mut timestamp: U256
}
  
Interface IDIAOracle {
    pub fn getValue(key: ByteVec) -> DIAOracleValue
}

Contract LoanFactory (
    admin: Address,
    loanTemplate: ByteVec,
    auctionHouse: ByteVec,
    feeTemplate: ByteVec,
    mut activeLoans: U256,
    mut rate: U256,
    oracle: IDIAOracle,
    alpaca: ByteVec
) {
    mapping [ByteVec, PairInfo] tokenPairs

    event NewLoan (
        contract: ByteVec, 
        tokenRequested: ByteVec, 
        tokenAmount: U256, 
        collateralToken: ByteVec, 
        collateralAmount: U256, 
        interest: U256, 
        duration: U256, 
        who: Address
    )

    event AcceptedLoan (
        contract: ByteVec, 
        who: Address
    )

    event LoanRemoved (
        contract: ByteVec, 
        who: Address
    )

    event LoanCanceled (
        contract: ByteVec,
        who: Address
    )

    event LoanLiqWith (
        contract: ByteVec,
        liquidation: Bool,
        who: Address
    )

    event LoanPayed (
        contract: ByteVec,
        who: Address
    )

    event AddCollateralLoan (
        contract: ByteVec, 
        who: Address, 
        token: ByteVec, 
        amount: U256
    )

    event RemoveCollateralLoan (
        contract: ByteVec, 
        who: Address, 
        token: ByteVec, 
        amount: U256
    )

    event LoanLiquidation (
        contract: ByteVec, 
        token: ByteVec, 
        startingBid: U256
    )

    enum LoanCodes {
        NotAdmin = 0
        TokenSizeTooSmall = 1
    }

    fn determineCollateralRatio(
        tokenRequested: ByteVec,
        tokenAmount: U256,
        tokenOracle: Bool,
        collateralToken: ByteVec, 
        collateralAmount: U256,
        collateralOracle: Bool,
        threshhold: U256
    ) -> (U256, Bool) {
        if (tokenPairs.contains!(tokenRequested) == true && tokenPairs.contains!(collateralToken)) {
            let mut loanValue = 0
            let mut collateralValue = 0

            // fetch token price
            if (tokenOracle) {
                loanValue = oracle.getValue(tokenPairs[tokenRequested].pair).value
            }
            else {
                loanValue = AlpacaFiOracle(alpaca).getValue(tokenPairs[tokenRequested].pair).value
            }

            // fetch collateral price
            if (collateralOracle) {
                collateralValue = oracle.getValue(tokenPairs[collateralToken].pair).value
            }
            else {
                collateralValue = AlpacaFiOracle(alpaca).getValue(tokenPairs[collateralToken].pair).value
            }

            if (loanValue == 0 || collateralValue == 0) {
                return 0, false
            }

            let collateralDecimals = tokenPairs[collateralToken].decimals
            let tokenDecimals = tokenPairs[tokenRequested].decimals

            // Normalize collateral amount to 18 decimals
            let collateralNormalized = (collateralAmount * (10 |**| 18)) / (10 |**| collateralDecimals)
            let collateralValueUSD = (collateralNormalized * collateralValue) / (10 |**| 8) // Remove 8 decimals

            // Normalize loan amount to 18 decimals
            let loanNormalized = (tokenAmount * (10 |**| 18)) / (10 |**| tokenDecimals)
            let loanValueUSD = (loanNormalized * loanValue) / (10 |**| 8) // Remove 8 decimals

            // Compute collateral-to-loan ratio in basis points (10000 = 100%)
            let ratio = (collateralValueUSD * 10000) / loanValueUSD // Multiply before division to avoid precision loss

            if (ratio > threshhold) {
                return ratio, true
            }

            else {
                return ratio, false
            }
        }

        return 0, false
    }

    // fee collector
    @using(checkExternalCaller = false, preapprovedAssets = false)
    pub fn depositFeeCollector(token: ByteVec) -> (ByteVec) {
        let collector = subContractId!(token)

        return collector
    }

    pub fn getRequiredTokens(contractId: ByteVec, withInterest: Bool) -> (ByteVec, U256) {
        let loan = Loan(contractId)

        let (token, amount) = loan.getTokenRequested()

        if (withInterest) {
            let interestTotal = loan.getInterest()

            return token, interestTotal
        }
        else {
            return token, amount
        }
    }

    fn checkTokenAmount(priceIn: U256, commissionRateIn: U256) -> () {
        // Calculate the commission based on the rate
        let commission = (priceIn * commissionRateIn) / 10000

        // Ensure the token amount is sufficient
        assert!(priceIn > commission, LoanCodes.TokenSizeTooSmall)

        // Additional optional check for a minimum base token amount
        assert!(priceIn >= 1000, LoanCodes.TokenSizeTooSmall)
    }

    @using(checkExternalCaller = false, preapprovedAssets = true, updateFields = true)
    pub fn createLoan(
        tokenRequested: ByteVec, 
        tokenAmount: U256,
        collateralToken: ByteVec, 
        collateralAmount: U256,
        interest: U256, 
        duration: U256,
        canLiquidate: Bool
    ) -> () {
        let caller = callerAddress!()

        checkTokenAmount(tokenAmount, rate)

        let oracleOne = tokenPairs[tokenRequested].oracle
        let oracleTwo = tokenPairs[collateralToken].oracle

        // need a solution for un-supported oracle tokens
        let (ratio, condition) = determineCollateralRatio(
            tokenRequested, 
            tokenAmount,
            oracleOne,
            collateralToken, 
            collateralAmount, 
            oracleTwo,
            15000 // 150%
        )

        // collateral is over 150 %
        if (canLiquidate) {
            assert!(condition == true, 2)
        }

        let (encodeImmutableFields, encodeMutableFields) = Loan.encodeFields!(
            caller,
            nullContractAddress!(),
            tokenRequested,
            tokenAmount,
            // collateral
            collateralToken,
            collateralAmount,
            interest,
            rate,
            duration,
            0,
            false,
            selfAddress!(),
            canLiquidate,
            ratio,
            auctionHouse
        )

        let contractID = copyCreateContract!{caller -> ALPH: (minimalContractDeposit!() * 3), collateralToken: collateralAmount}(
            loanTemplate,                                                                                  
            encodeImmutableFields,
            encodeMutableFields
        )

        activeLoans = activeLoans + 1

        // emit event
        emit NewLoan(contractID, tokenRequested, tokenAmount, collateralToken, collateralAmount, interest, duration, caller)
    }

    @using(checkExternalCaller = false, preapprovedAssets = true)
    pub fn accept(contractId: ByteVec) -> () {
        let loan = Loan(contractId)

        let caller = callerAddress!()

        let (token, tokenAmount) = loan.getTokenRequested()
        let (collateral, collateralAmount) = loan.getTokenCollateral()

        let oracleOne = tokenPairs[token].oracle
        let oracleTwo = tokenPairs[collateral].oracle

        let (ratio, condition) = determineCollateralRatio(
            token, 
            tokenAmount,
            oracleOne,
            collateral, 
            collateralAmount, 
            oracleTwo,
            15000
        )

        // loan should be in good standing to be accepted

        if (loan.canLoanLiquidate() == true) {
            assert!(condition == true, 8)
        }

        loan.acceptLoan{caller -> token: tokenAmount, ALPH: dustAmount!()}(caller, ratio)

        // emit event
        emit AcceptedLoan(contractId, caller)
    }

    @using(checkExternalCaller = false, preapprovedAssets = false)
    pub fn cancel(contractId: ByteVec) -> () {
        let loan = Loan(contractId)

        let caller = callerAddress!()

        let owner = loan.getBorrower()
        assert!(caller == owner, 0)

        loan.cancelLoan(caller)

        // emit event
        emit LoanCanceled(contractId, caller)
    }

    @using(checkExternalCaller = false, preapprovedAssets = true, assetsInContract = enforced)
    pub fn pay(contractId: ByteVec) -> () {
        let loan = Loan(contractId)

        let caller = callerAddress!()

        let owner = loan.getBorrower()
        assert!(caller == owner, 0)

        let (token, amount) = loan.getTokenRequested()
        let totalAmount = loan.getInterest()

        loan.payLoan{caller -> token: totalAmount, ALPH: dustAmount!() * 2}(caller)

        // emit event
        emit LoanPayed(contractId, caller)
    }
    
    @using(checkExternalCaller = false, preapprovedAssets = false, assetsInContract = enforced)
    pub fn forfeit(contractId: ByteVec) -> () {
        let loan = Loan(contractId)

        let caller = callerAddress!()

        let (collateral, collateralAmount) = loan.getTokenCollateral()
        let (token, amount) = loan.getTokenRequested()

        // whether or not a auction will be made for the funds
        let liquidation = loan.canLoanLiquidate()

        loan.forfeit()

        emit LoanLiqWith(
            contractId,
            liquidation,
            caller
        )
    }

    @using(checkExternalCaller = false, updateFields = false)
    pub fn liquidation(contractId: ByteVec) -> () {
        let loan = Loan(contractId)

        let caller = callerAddress!()

        let (token, tokenAmount) = loan.getTokenRequested()
        let (collateral, collateralAmount) = loan.getTokenCollateral()

        let oracleOne = tokenPairs[token].oracle
        let oracleTwo = tokenPairs[collateral].oracle

        let (ratio, condition) = determineCollateralRatio(
            token, 
            tokenAmount,
            oracleOne,
            collateral, 
            collateralAmount, 
            oracleTwo,
            15000
        )

        assert!(condition == false, 8)

        loan.activateLiquidation(ratio)

        emit LoanLiquidation(contractId, token, tokenAmount)
    }

    @using(checkExternalCaller = false, updateFields = false, preapprovedAssets = true)
    pub fn addCollateral(contractId: ByteVec, amount: U256) -> () {
        let loan = Loan(contractId)

        let caller = callerAddress!()

        let owner = loan.getBorrower()
        assert!(caller == owner, 0)

        let (token, tokenAmount) = loan.getTokenRequested()
        let (collateral, collateralAmount) = loan.getTokenCollateral()

        let oracleOne = tokenPairs[token].oracle
        let oracleTwo = tokenPairs[collateral].oracle

        let (ratio, _) = determineCollateralRatio(
            token, 
            tokenAmount,
            oracleOne,
            collateral, 
            collateralAmount + amount, 
            oracleTwo,
            0
        )

        let _ = loan.addCollateral{caller -> collateral: amount, ALPH: dustAmount!()}(caller, amount, ratio)

        emit AddCollateralLoan(contractId, caller, collateral, collateralAmount + amount)
    }

    @using(checkExternalCaller = false, updateFields = false, preapprovedAssets = true, assetsInContract = enforced)
    pub fn removeCollateral(contractId: ByteVec, amount: U256) -> () {
        let loan = Loan(contractId)

        let caller = callerAddress!()

        let owner = loan.getBorrower()
        assert!(caller == owner, 0)

        let (token, tokenAmount) = loan.getTokenRequested()
        let (collateral, collateralAmount) = loan.getTokenCollateral()

        let oracleOne = tokenPairs[token].oracle
        let oracleTwo = tokenPairs[collateral].oracle

        let (ratio, _) = determineCollateralRatio(
            token, 
            tokenAmount,
            oracleOne,
            collateral, 
            collateralAmount - amount, // remove collateral and perform calculation
            oracleTwo,
            0
        )

        assert!(ratio > 15000, 1) // prevent falling into liquidation

        let _ = loan.removeCollateral{callerAddress!() -> ALPH: dustAmount!()}(caller, amount, ratio)

        emit RemoveCollateralLoan(contractId, caller, collateral, collateralAmount - amount)
    }

    @using(checkExternalCaller = true, preapprovedAssets = false, updateFields = true)
    pub fn editRate(newRate: U256) -> () {
        checkCaller!(callerAddress!() == admin, LoanCodes.NotAdmin)

        rate = newRate
    }

    // need to add fee contracts here
    @using(checkExternalCaller = true, preapprovedAssets = true, updateFields = false)
    pub fn tokenMapping(token: ByteVec, add: Bool, pairtoken: ByteVec, decimals: U256, alephiumOracle: Bool) -> () {
        checkCaller!(callerAddress!() == admin, LoanCodes.NotAdmin)

        if (add) {
            let b = PairInfo {
                pair: pairtoken,
                decimals: decimals,
                oracle: alephiumOracle
            }

            tokenPairs.insert!(callerAddress!(), token, b)

            // add fee contract for token
            let (encodeImmutableFields, encodeMutableFields) = Fee.encodeFields!(
                admin,
                selfAddress!(),
                token,
                0,
                false
            )
            
            let feeId = copyCreateSubContract!{callerAddress!() -> ALPH: minimalContractDeposit!()}(
                token,
                feeTemplate,
                encodeImmutableFields,
                encodeMutableFields
            )
        }
        else {
            tokenPairs.remove!(callerAddress!(), token)

            let fee = Fee(subContractId!(token))

            fee.destroyFee(callerAddress!())
        }
    }

    @using(checkExternalCaller = true, preapprovedAssets = true, updateFields = false, assetsInContract = enforced)
    pub fn withdrawLoanFactoryFees(who: Address, token: ByteVec, amount: U256) -> () {
        checkCaller!(callerAddress!() == admin, LoanCodes.NotAdmin)

        let feeContract = Fee(subContractId!(token))

        feeContract.withdrawAsset{callerAddress!() -> ALPH: dustAmount!()}(callerAddress!(), who, amount)

        // emit event
    }

    @using(updateFields = false, checkExternalCaller = true)
    pub fn updateLoanFactoryCode(newCode: ByteVec) -> () {
        checkCaller!(callerAddress!() == admin, LoanCodes.NotAdmin)

        migrate!(newCode)
    }

    @using(updateFields = true, checkExternalCaller = true)
    pub fn updateLoanFactoryFields(newCode: ByteVec, immFields: ByteVec, mutFields: ByteVec) -> () {
        checkCaller!(callerAddress!() == admin, LoanCodes.NotAdmin)

        migrateWithFields!(newCode, immFields, mutFields)
    }
}

TxScript CreateLoan (
    loanFactory: LoanFactory,
    tokenRequested: ByteVec,
    tokenAmount: U256,
    collateralToken: ByteVec,
    collateralAmount: U256,
    interest: U256,
    duration: U256,
    canLiquidate: Bool
) {
    loanFactory.createLoan{callerAddress!() -> ALPH: (minimalContractDeposit!() * 3), collateralToken: collateralAmount}(
        tokenRequested,
        tokenAmount,
        collateralToken,
        collateralAmount,
        interest,
        duration,
        canLiquidate
    )
}

TxScript AcceptLoan (
    loanFactory: LoanFactory,
    contract: ByteVec
) {
    let (token, amount) = loanFactory.getRequiredTokens(contract, false)

    loanFactory.accept{callerAddress!() -> token: amount, ALPH: dustAmount!()}(contract)
}

TxScript CancelLoan (
    loanFactory: LoanFactory,
    contract: ByteVec
) {
    loanFactory.cancel(contract)
}

TxScript PayLoan (
    loanFactory: LoanFactory,
    contract: ByteVec
) {
    let (token, amount) = loanFactory.getRequiredTokens(contract, true)

    loanFactory.pay{callerAddress!() -> token: amount, ALPH: dustAmount!() * 2}(contract)
}

TxScript ForfeitLoan (
    loanFactory: LoanFactory,
    contract: ByteVec
) {
    loanFactory.forfeit(contract)
}

// liquidation and auctions

TxScript AddCollateral (
    loanFactory: LoanFactory,
    contractId: ByteVec, 
    amount: U256
) {
    let (token, _) = Loan(contractId).getTokenCollateral()

    loanFactory.addCollateral{callerAddress!() -> token: amount, ALPH: dustAmount!()}(contractId, amount)
}

TxScript RemoveCollateral (
    loanFactory: LoanFactory,
    contractId: ByteVec, 
    amount: U256
) {
    let (token, _) = Loan(contractId).getTokenCollateral()

    loanFactory.removeCollateral{callerAddress!() -> ALPH: dustAmount!()}(contractId, amount)
}

TxScript LiquidationLoan (
    loanFactory: LoanFactory,
    contract: ByteVec
) {
    loanFactory.liquidation(contract)
}

// admin

TxScript EditLoanRate (
    loanFactory: LoanFactory,
    newRate: U256
) {
    loanFactory.editRate(newRate)
}

TxScript WithdrawLoanFactoryFees (
    loanFactory: LoanFactory,
    who: Address,
    token: ByteVec,
    amount: U256
) {
    loanFactory.withdrawLoanFactoryFees{callerAddress!() -> ALPH: dustAmount!()}(who, token, amount)
}

TxScript TokenMapping (
    loanFactory: LoanFactory,
    token: ByteVec, 
    add: Bool,
    pairtoken: ByteVec,
    decimals: U256,
    alephiumOracle: Bool
) {
    loanFactory.tokenMapping{callerAddress!() -> ALPH: mapEntryDeposit!() + minimalContractDeposit!()}(token, add, pairtoken, decimals, alephiumOracle)
}

TxScript UpdateLoanFactoryCode (
    loanFactory: LoanFactory,
    newCode: ByteVec
) {
    loanFactory.updateLoanFactoryCode(newCode)
}

TxScript UpdateLoanFactoryFields (
    loanFactory: LoanFactory,
    newCode: ByteVec, 
    immFields: ByteVec, 
    mutFields: ByteVec
) {
    loanFactory.updateLoanFactoryFields(newCode, immFields, mutFields)
}
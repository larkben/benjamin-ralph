import "std/fungible_token_interface"

// Formulas
// STokens = DepositedAmount / ExchnageRate
// ExchnageRate(new) = TotalPoolAssets / TotalSTokens
// AssetsRecieved = sTokens * ExchangeRate

// ALPH : ALPH Pool Loans

Contract Pool (
    admin: Address,
    debtTemplate: ByteVec,
    poolToken: ByteVec,
    poolDecimals: U256,
    poolPair: ByteVec,
    // sPoolToken and Pool values
    name: ByteVec,
    symbol: ByteVec,
    mut sTokenSupply: U256,
    mut exchangeRate: U256,
    mut totalPoolAssets: U256,
    mut depositedAmount: U256,
    mut totalBorrowed: U256,
    mut fees: U256,
    // pool specs
    oracle: IDIAOracle
) implements IFungibleToken {

    event NewDebt(who: Address, loan: U256, collateral: U256, rate: U256, contract: ByteVec)
    event RemoveDebt(who: Address, contract: ByteVec)

    enum PoolCodes {
        CannotDepositZero = 0
        CannotBorrowZero = 1
        InsufficientLiquidity = 2
        InsufficientCollateral = 3
        NoActiveLoan = 4
        NoOverPayment = 5
        WrongDebtPool = 6
        NotOwner = 7
    }

    pub fn getSymbol() -> (ByteVec) {
        return symbol
    }

    pub fn getName() -> (ByteVec) {
        return name
    }

    pub fn getDecimals() -> (U256) {
        return 18
    }

    pub fn getTotalSupply() -> (U256) {
        return 10000000000000000000000000000000000000000
    }

    pub fn getPoolToken() -> (ByteVec) {
        return poolToken
    }

    pub fn getSPoolToken() -> (ByteVec) {
        return selfTokenId!()
    }

    //fn calculateAccruedInterest(loanInfo: LoanInfo) -> (U256) {
    //    let timeElapsed = blockTimeStamp!() - loanInfo.lastInterestUpdate
    //    // Interest = principal * rate * time / (seconds per year * 10000)
    //    let secondsPerYear = 31536000
    //    return (loanInfo.principal * interestRate * timeElapsed) / (secondsPerYear * 10000)
    //}

    fn getPoolRate() -> (U256) {
        let utilization = (totalBorrowed * 10000) / totalPoolAssets
    
        if (utilization < 5000) { // < 50%
            return 200 // 2%
        } else if (utilization < 8000) { // 50% - 80%
            return 500 // 5%
        } else if (utilization < 9000) { // 80% - 90%
            return 800 // 8%
        } else {
            return 1500 // 15% (High-risk)
        }
    }

    fn determineCollateralRatio(
        tokenAmount: U256,
        collateralAmount: U256
    ) -> (U256) {
        // fetch token price
        let loanValue = oracle.getValue(poolPair).value
        let collateralValue = oracle.getValue(poolPair).value

        if (loanValue == 0 || collateralValue == 0) {
            return 0
        }

        let collateralNormalized = (collateralAmount * (10 |**| 18)) / (10 |**| poolDecimals)
        let collateralValueUSD = (collateralNormalized * collateralValue) / (10 |**| 8) // Remove 8 decimals

        let loanNormalized = (tokenAmount * (10 |**| 18)) / (10 |**| poolDecimals)
        let loanValueUSD = (loanNormalized * loanValue) / (10 |**| 8) // Remove 8 decimals

        let ratio = (collateralValueUSD * 10000) / loanValueUSD // Multiply before division to avoid precision loss

        return ratio
    }

    @using(checkExternalCaller = false) 
    pub fn determineCollateralAmount(
        tokenAmount: U256,
        desiredRatio: U256
    ) -> (U256) {
        let loanValue = oracle.getValue(poolPair).value
        let collateralValue = oracle.getValue(poolPair).value

        if (loanValue == 0 || collateralValue == 0 || desiredRatio == 0) {
            return 0
        }

        let loanNormalized = (tokenAmount * (10 |**| 18)) / (10 |**| poolDecimals)
        let loanValueUSD = (loanNormalized * loanValue) / (10 |**| 8)

        let requiredCollateralUSD = (loanValueUSD * desiredRatio) / 10000

        let collateralNormalized = (requiredCollateralUSD * (10 |**| 8)) / collateralValue
        let requiredCollateralAmount = (collateralNormalized * (10 |**| poolDecimals)) / (10 |**| 18)

        return requiredCollateralAmount
    }

    pub fn getTotalRepayment(contract: ByteVec) -> (U256) {
        let debt = Debt(subContractId!(contract))

        let totalDebt = debt.calculateRepayment()

        return totalDebt
    }

    @using(checkExternalCaller = false, updateFields = true)
    pub fn getPoolFee(amount: U256) -> (U256) {
        let flatFee = (amount * 3) / 100            // 3% fee on borrow

        fees = fees + flatFee

        return flatFee
    }

	@using(checkExternalCaller = false, assetsInContract = true, preapprovedAssets = true, updateFields = true)
    pub fn deposit(amount: U256) -> () {
        let caller = callerAddress!()

        assert!(amount > 0, PoolCodes.CannotDepositZero)

        transferToken!(caller, selfAddress!(), ALPH, dustAmount!() * 3)
        transferToken!(caller, selfAddress!(), poolToken, amount)

        // Normalize calculations to avoid precision errors
        let precisionFactor = 1000000000000000000 // 1e18
        let totalSTokens = (amount * precisionFactor) / exchangeRate

        sTokenSupply = sTokenSupply + totalSTokens

        transferToken!(selfAddress!(), caller, ALPH, dustAmount!())
        transferToken!(selfAddress!(), caller, selfContractId!(), totalSTokens)

        depositedAmount = depositedAmount + amount
        totalPoolAssets = totalPoolAssets + amount

        exchangeRate = (totalPoolAssets * precisionFactor) / sTokenSupply
    }

    @using(checkExternalCaller = false, assetsInContract = true, preapprovedAssets = true, updateFields = true)
    pub fn withdraw(amount: U256) -> () {
        let caller = callerAddress!()

        transferToken!(caller, selfAddress!(), ALPH, dustAmount!() * 3)
        transferToken!(caller, selfAddress!(), selfContractId!(), amount)

        let precisionFactor = 1000000000000000000 // 1e18
        let assetsToReceive = (amount * exchangeRate) / precisionFactor

        assert!(depositedAmount >= assetsToReceive, PoolCodes.InsufficientLiquidity)

        sTokenSupply = sTokenSupply - amount
        totalPoolAssets = totalPoolAssets - assetsToReceive
        depositedAmount = depositedAmount - assetsToReceive

        transferToken!(selfAddress!(), caller, ALPH, dustAmount!() * 3)
        transferToken!(selfAddress!(), caller, poolToken, assetsToReceive)

        // Avoid division by zero
        if (sTokenSupply > 0) {
            exchangeRate = (totalPoolAssets * precisionFactor) / sTokenSupply
        } else {
            exchangeRate = precisionFactor // Reset to 1 ALPH per sALPH when empty
        }
    }

    @using(checkExternalCaller = false, assetsInContract = true, preapprovedAssets = true, updateFields = true)
    pub fn borrow(amount: U256) -> () {
        let caller = callerAddress!()

        assert!(amount > 0, PoolCodes.CannotBorrowZero)
        assert!(totalPoolAssets - totalBorrowed >= amount, PoolCodes.InsufficientLiquidity)

        let precisionFactor = 1000000000000000000 // 1e18
        let requiredCollateral = determineCollateralAmount(amount, 15000) // 150% collateral
        let rate = getPoolRate()

        // Take fee
        let poolFee = getPoolFee(amount)
        transferToken!(caller, selfAddress!(), poolToken, poolFee)

        // Create debt contract
        let (encodeImmutableFields, encodeMutableFields) = Debt.encodeFields!(
            caller,
            amount,
            requiredCollateral,
            blockTimeStamp!(),
            rate,
            selfAddress!()
        )

        let time = blockTimeStamp!()
        let value = encodeToByteVec!(time, caller)

        let debtId = copyCreateSubContract!{callerAddress!() -> ALPH: minimalContractDeposit!() * 2, poolToken: requiredCollateral}(
            value,
            debtTemplate,
            encodeImmutableFields,
            encodeMutableFields
        )

        totalBorrowed = totalBorrowed + amount

        transferToken!(selfAddress!(), caller, poolToken, amount)

        emit NewDebt(caller, amount, requiredCollateral, rate, value)
    }

    @using(checkExternalCaller = false, assetsInContract = true, preapprovedAssets = true, updateFields = true)
    pub fn repay(contract: ByteVec) -> () {
        let caller = callerAddress!()

        // Load the debt contract
        let debt = Debt(subContractId!(contract))

        // Get total repayment amount (principal + interest)
        let totalRepayment = debt.calculateRepayment()
        let collateralAmount = debt.getCollateralAmount()
        let parent = debt.getParentAddress()
        let debtOwner = debt.getDebtor()

        // Ensure caller is the debtor
        assert!(caller == debtOwner, PoolCodes.NotOwner)

        // Ensure debt belongs to this pool
        assert!(selfAddress!() == parent, PoolCodes.WrongDebtPool)

        // Transfer repayment amount to pool
        transferToken!(caller, selfAddress!(), poolToken, totalRepayment)

        // Release collateral back to borrower
        transferToken!(selfAddress!(), caller, poolToken, collateralAmount)

        // Update pool balances
        totalPoolAssets = totalPoolAssets + totalRepayment
        totalBorrowed = totalBorrowed - debt.getLoanAmount()

        // Destroy debt contract
        debt.destroyDebt(caller)

        emit RemoveDebt(caller, contract)
    }

    //! the user should be repaying the unpaid debt at this point to redeem on the collateral
	@using(checkExternalCaller = false, assetsInContract = true, preapprovedAssets = false, updateFields = true)
    pub fn liquidate(contract: ByteVec) -> () {
        let debt = Debt(subContractId!(contract))
    
        let totalDebt = debt.calculateRepayment()
        let caller = callerAddress!()
    
        let collateral = debt.getCollateralAmount()
        let parent = debt.getParentAddress()
    
        // verify debt is from pool
        assert!(selfAddress!() == parent, PoolCodes.WrongDebtPool)
    
        let collateralRatio = determineCollateralRatio(totalDebt, collateral)
        assert!(collateralRatio < 15000, PoolCodes.InsufficientCollateral) // Must be below 150% to liquidate
    
        let liquidationPenalty = (collateral * 8) / 100  // 8% liquidation fee
        let liquidationIncentive = (collateral * 2) / 100 // 2% liquidation incentive to caller
    
        let seizedCollateral = collateral - (liquidationPenalty + liquidationIncentive)
    
        // Pay liquidation incentive to caller
        transferToken!(selfAddress!(), caller, ALPH, dustAmount!())
        transferToken!(selfAddress!(), caller, poolToken, liquidationIncentive)

        fees = fees + liquidationPenalty
        totalPoolAssets = totalPoolAssets + seizedCollateral

        debt.destroyDebt(selfAddress!())
    }

    @using(checkExternalCaller = true, updateFields = true, assetsInContract = true)
    pub fn collectFees() -> () {
        checkCaller!(callerAddress!() == admin, 1)

        transferToken!(selfAddress!(), callerAddress!(), poolToken, fees)

        fees = fees - fees
    }

    @using(checkExternalCaller = true, assetsInContract = true)
    pub fn destoryPool() -> () {
        checkCaller!(callerAddress!() == admin, 1)

        destroySelf!(admin)
    }
}

TxScript CreateStablePool (
    poolCode: ByteVec,
    admin: Address,
    debtTemplate: ByteVec,
    poolToken: ByteVec,
    poolDecimals: U256,
    poolPair: ByteVec,
    // sPoolToken and Pool values
    name: ByteVec,
    symbol: ByteVec,
    sTokenSupply: U256,
    exchangeRate: U256,
    totalPoolAssets: U256,
    depositedAmount: U256,
    totalBorrowed: U256,
    fees: U256,
    // pool specs
    oracle: IDIAOracle
) {
    let (encodedImmFields, encodedMutFields) = Pool.encodeFields!(
        admin,
        debtTemplate,
        poolToken,
        poolDecimals,
        poolPair,
        // sPoolToken and Pool values
        name,
        symbol,
        sTokenSupply,
        exchangeRate,
        totalPoolAssets,
        depositedAmount,
        totalBorrowed,
        fees,
        // pool specs
        oracle
    )
    let contractId = createContractWithToken!{callerAddress!() -> ALPH : minimalContractDeposit!()}(
        poolCode, 
        encodedImmFields, 
        encodedMutFields,
        10000000000000000000000000000000000000000
    )
}

TxScript Deposit (
    pool: Pool,
    amount: U256
) {
    let token = pool.getPoolToken()

    pool.deposit{callerAddress!() -> token: amount, ALPH: dustAmount!() * 4}(amount)
}

TxScript Withdraw (
    pool: Pool,
    amount: U256
) {
    let sToken = pool.getSPoolToken()

    pool.withdraw{callerAddress!() -> sToken: amount, ALPH: dustAmount!() * 4}(amount)
}


TxScript Borrow (
    pool: Pool,
    amount: U256
) {
    let collateral = pool.determineCollateralAmount(amount, 15000)
    let token = pool.getPoolToken()

    pool.borrow{callerAddress!() -> token: collateral, ALPH: dustAmount!() * 4}(amount)
}


TxScript Repay (
    pool: Pool,
    id: ByteVec
) {
    let amount = pool.getTotalRepayment(id)
    let token = pool.getPoolToken()

    pool.repay{callerAddress!() -> token: amount, ALPH: dustAmount!() * 4}(id)
}


TxScript LiquidateDebt (
    pool: Pool,
    id: ByteVec
) {
    pool.liquidate(id)
}
